#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// Configuración de Wi-Fi
const char* ssid = "Luna 2.4"; // Nombre de tu red Wi-Fi
const char* password = "Grecia2607"; // Contraseña de tu red Wi-Fi

// Configuración del Broker MQTT
const char* mqtt_server = "broker.hivemq.com"; // Broker público
const int mqtt_port = 1883; // Puerto MQTT

// Pin para controlar el motor háptico
const int motorPin = D5; // Pin GPIO 14 (D5)

WiFiClient espClient;
PubSubClient client(espClient);

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Conectando a: ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("Wi-Fi conectado");
  Serial.println("Dirección IP: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Mensaje recibido [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Controlar el motor háptico
  if (strcmp(topic, "casa/motor") == 0) {
    if ((char)payload[0] == '1') {
      digitalWrite(motorPin, HIGH); // Encender motor
      Serial.println("Motor ON");
    } else if ((char)payload[0] == '0') {
      digitalWrite(motorPin, LOW); // Apagar motor
      Serial.println("Motor OFF");
    }
  }
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Intentando conexión MQTT...");
    if (client.connect("NodeMCUClient")) {
      Serial.println("Conectado");
      client.subscribe("casa/motor"); // Suscríbete al tema del motor
    } else {
      Serial.print("Error, rc=");
      Serial.print(client.state());
      Serial.println(" Intentando de nuevo en 5 segundos...");
      delay(5000);
    }
  }
}

void setup() {
  pinMode(motorPin, OUTPUT);
  digitalWrite(motorPin, LOW); // Inicia con el motor apagado
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
}
